openapi: 3.0.2
info:
  title: MLServer APIs
  version: '1.0'
paths:
  /v2/models/{model_name}/ready:
    get:
      summary: Model Ready
      operationId: method_v2_models__model_name__ready_get
      parameters:
        - required: true
          schema:
            title: Model Name
            type: string
          name: model_name
          in: path
        - required: false
          schema:
            title: Model Version
            type: string
          name: model_version
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      description: >-
        The “model ready” health API indicates if a specific model is ready for
        inferencing. The model name must be available in the URL. If a model
        version is not provided as a query parameter the server may choose a
        version based on its own policies.
  /v2/models/{model_name}/versions/{model_version}/ready:
    get:
      summary: Model Ready
      operationId: method_v2_models__model_name__versions__model_version__ready_get
      parameters:
        - required: true
          schema:
            title: Model Name
            type: string
          name: model_name
          in: path
        - required: true
          schema:
            title: Model Version
            type: string
          name: model_version
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      description: >-
        The “model ready” health API indicates if a specific model is ready for
        inferencing. The model name and version must be available in the URL.
  /v2/models/{model_name}/infer:
    post:
      summary: Method
      operationId: method_v2_models__model_name__infer_post
      parameters:
        - required: true
          schema:
            title: Model Name
            type: string
          name: model_name
          in: path
        - required: false
          schema:
            title: Model Version
            type: string
          name: model_version
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InferenceRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      description: 'Inference'
  /v2/models/{model_name}/versions/{model_version}/infer:
    post:
      summary: Inference
      operationId: method_v2_models__model_name__versions__model_version__infer_post
      parameters:
        - required: true
          schema:
            title: Model Name
            type: string
          name: model_name
          in: path
        - required: true
          schema:
            title: Model Version
            type: string
          name: model_version
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InferenceRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      description: >-
        An inference request is made with an HTTP POST to an inference endpoint.
        In the request the HTTP body contains the [Inference Request JSON
        Object](#/components/schemas/RequestInput). In the corresponding response
        the HTTP body contains the [Inference Response JSON
        Object](#inference-response-json-object) or [Inference Response JSON
        Error Object](#inference-response-json-error-object). See [Inference
        Request Examples](#inference-request-examples) for some example
        HTTP/REST requests and responses.
  /v2/models/{model_name}:
    get:
      summary: Model Metadata
      operationId: method_v2_models__model_name__get
      parameters:
        - required: true
          schema:
            title: Model Name
            type: string
          name: model_name
          in: path
        - required: false
          schema:
            title: Model Version
            type: string
          name: model_version
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      description: ''
  /v2/models/{model_name}/versions/{model_version}:
    get:
      summary: Model Metadata
      operationId: method_v2_models__model_name__versions__model_version__get
      parameters:
        - required: true
          schema:
            title: Model Name
            type: string
          name: model_name
          in: path
        - required: true
          schema:
            title: Model Version
            type: string
          name: model_version
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      description: >-
        The per-model metadata endpoint provides information about a model. A
        model metadata request is made with an HTTP GET to a model metadata
        endpoint. In the corresponding response the HTTP body contains the
        [Model Metadata Response JSON
        Object](#model-metadata-response-json-object) or the [Model Metadata
        Response JSON Error Object](#model-metadata-response-json-error-object).
        The model name and (optionally) version must be available in the URL.
        If a version is not provided the server may choose a version based on its own policies or return an error.
  /v2/health/live:
    get:
      summary: Server Live
      operationId: method_v2_health_live_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
      description: >-
        The “server live” API indicates if the inference server is able to
        receive and respond to metadata and inference requests. The “server
        live” API can be used directly to implement the Kubernetes
        livenessProbe.
  /v2/health/ready:
    get:
      summary: Server Ready
      operationId: method_v2_health_ready_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
      description: >-
        The “server ready” health API indicates if all the models are ready for
        inferencing. The “server ready” health API can be used directly to
        implement the Kubernetes readinessProbe.
  /v2:
    get:
      summary: Server Metadata
      operationId: method_v2_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
      description: >-
        The server metadata endpoint provides information about the server. A
        server metadata request is made with an HTTP GET to a server metadata
        endpoint. In the corresponding response the HTTP body contains the
        [Server Metadata Response JSON
        Object](#server-metadata-response-json-object) or the [Server Metadata
        Response JSON Error
        Object](#server-metadata-response-json-error-object).
  /v2/repository/index:
    post:
      summary: Method
      operationId: method_v2_repository_index_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositoryIndexRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      description: ''
  /v2/repository/models/{model_name}/load:
    post:
      summary: Load
      operationId: method_v2_repository_models__model_name__load_post
      parameters:
        - required: true
          schema:
            title: Model Name
            type: string
          name: model_name
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      description: ''
  /v2/repository/models/{model_name}/unload:
    post:
      summary: Unload
      operationId: method_v2_repository_models__model_name__unload_post
      parameters:
        - required: true
          schema:
            title: Model Name
            type: string
          name: model_name
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      description: ''
components:
  schemas:
    HTTPValidationError:
      title: HTTPValidationError
      type: object
      properties:
        detail:
          title: Detail
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    InferenceRequest:
      title: InferenceRequest
      required:
        - inputs
      type: object
      properties:
        id:
          title: Id
          type: string
        parameters:
          $ref: '#/components/schemas/Parameters'
        inputs:
          title: Inputs
          type: array
          items:
            $ref: '#/components/schemas/RequestInput'
        outputs:
          title: Outputs
          type: array
          items:
            $ref: '#/components/schemas/RequestOutput'
    Parameters:
      title: Parameters
      type: object
      properties:
        content_type:
          title: Content Type
          type: string
        headers:
          title: Headers
          type: object
    RepositoryIndexRequest:
      title: RepositoryIndexRequest
      type: object
      properties:
        ready:
          title: Ready
          type: boolean
    RequestInput:
      title: RequestInput
      required:
        - name
        - shape
        - datatype
        - data
      type: object
      properties:
        name:
          title: Name
          type: string
        shape:
          title: Shape
          type: array
          items:
            type: integer
        datatype:
          title: Datatype
          type: string
        parameters:
          $ref: '#/components/schemas/Parameters'
        data:
          $ref: '#/components/schemas/TensorData'
    RequestOutput:
      title: RequestOutput
      required:
        - name
      type: object
      properties:
        name:
          title: Name
          type: string
        parameters:
          $ref: '#/components/schemas/Parameters'
    TensorData:
      title: TensorData
    ValidationError:
      title: ValidationError
      required:
        - loc
        - msg
        - type
      type: object
      properties:
        loc:
          title: Location
          type: array
          items:
            type: string
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
